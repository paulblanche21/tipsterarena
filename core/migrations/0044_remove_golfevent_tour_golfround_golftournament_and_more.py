# Generated by Django 5.2 on 2025-05-04 00:51

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0043_merge_20250504_0050'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='golfevent',
            name='tour',
        ),
        migrations.CreateModel(
            name='GolfRound',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('round_number', models.PositiveIntegerField()),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='scheduled', max_length=20)),
                ('weather_condition', models.CharField(default='N/A', max_length=100)),
                ('weather_temperature', models.CharField(default='N/A', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rounds', to='core.golfevent')),
            ],
            options={
                'ordering': ['event', 'round_number'],
                'unique_together': {('event', 'round_number')},
            },
        ),
        migrations.CreateModel(
            name='GolfTournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tournament_id', models.CharField(max_length=50, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('description', models.TextField(blank=True)),
                ('prize_fund', models.CharField(default='N/A', max_length=50)),
                ('is_major', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('defending_champion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='defending_titles', to='core.golfplayer')),
                ('tour', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournaments', to='core.golftour')),
            ],
            options={
                'ordering': ['start_date'],
            },
        ),
        migrations.RunSQL(
            sql="""
            -- Create default tour if it doesn't exist
            INSERT INTO core_golftour (tour_id, name, icon, priority)
            VALUES ('default', 'Default Tour', 'üèåÔ∏è', 999)
            ON CONFLICT (tour_id) DO NOTHING;

            -- Get the ID of the default tour
            WITH default_tour AS (
                SELECT id FROM core_golftour WHERE tour_id = 'default'
            )
            -- Create default tournament using the default tour's ID
            INSERT INTO core_golftournament (
                tournament_id, name, description, prize_fund, start_date, end_date,
                tour_id, is_major, created_at, updated_at
            )
            SELECT
                'default',
                'Default Tournament',
                'Default tournament for existing events',
                '1000000',
                CURRENT_DATE,
                CURRENT_DATE,
                dt.id,
                false,
                CURRENT_TIMESTAMP,
                CURRENT_TIMESTAMP
            FROM default_tour dt
            ON CONFLICT (tournament_id) DO NOTHING;
            """,
            reverse_sql="DELETE FROM core_golftournament WHERE tournament_id = 'default';"
        ),
        migrations.AddField(
            model_name='golfevent',
            name='tournament',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='events', to='core.golftournament'),
            preserve_default=False,
        ),
        migrations.CreateModel(
            name='GolfScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField()),
                ('total_score', models.IntegerField()),
                ('strokes', models.IntegerField()),
                ('final_position', models.IntegerField(blank=True, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('cut', 'Cut'), ('withdrawn', 'Withdrawn'), ('disqualified', 'Disqualified')], default='active', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scores', to='core.golfplayer')),
                ('round', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scores', to='core.golfround')),
            ],
            options={
                'ordering': ['round', 'total_score'],
                'unique_together': {('player', 'round')},
            },
        ),
        migrations.AddIndex(
            model_name='golftournament',
            index=models.Index(fields=['tournament_id'], name='core_golfto_tournam_05ec6e_idx'),
        ),
        migrations.AddIndex(
            model_name='golftournament',
            index=models.Index(fields=['start_date', 'end_date'], name='core_golfto_start_d_0cdb0d_idx'),
        ),
    ]
