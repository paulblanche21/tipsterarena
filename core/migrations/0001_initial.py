# Generated by Django 5.2.1 on 2025-06-15 19:51

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(max_length=280)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='comments/')),
                ('gif_url', models.URLField(blank=True, null=True)),
                ('parent_comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='core.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MessageThread',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_message', models.TextField(blank=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('participants', models.ManyToManyField(related_name='message_threads', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='messages/')),
                ('gif_url', models.URLField(blank=True, null=True)),
                ('is_read', models.BooleanField(default=False)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('thread', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='core.messagethread')),
            ],
        ),
        migrations.CreateModel(
            name='Tip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sport', models.CharField(choices=[('football', 'Football'), ('golf', 'Golf'), ('tennis', 'Tennis'), ('horse_racing', 'Horse Racing'), ('american_football', 'American Football'), ('baseball', 'Baseball'), ('basketball', 'Basketball'), ('boxing', 'Boxing'), ('cricket', 'Cricket'), ('cycling', 'Cycling'), ('darts', 'Darts'), ('gaelic_games', 'Gaelic Games'), ('greyhound_racing', 'Greyhound Racing'), ('motor_sport', 'Motor Sport'), ('rugby_union', 'Rugby Union'), ('snooker', 'Snooker'), ('volleyball', 'Volleyball')], max_length=20)),
                ('text', models.TextField()),
                ('image', models.ImageField(blank=True, null=True, upload_to='tips/')),
                ('gif_url', models.URLField(blank=True, null=True)),
                ('gif_width', models.PositiveIntegerField(blank=True, null=True)),
                ('gif_height', models.PositiveIntegerField(blank=True, null=True)),
                ('poll', models.TextField(blank=True, default='{}', null=True)),
                ('emojis', models.TextField(blank=True, default='{}', null=True)),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('scheduled_at', models.DateTimeField(blank=True, null=True)),
                ('audience', models.CharField(choices=[('everyone', 'Everyone'), ('followers', 'Followers')], default='everyone', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('odds', models.CharField(blank=True, help_text="The odds for the tip (e.g., '2.5' or '2/1')", max_length=20, null=True)),
                ('odds_format', models.CharField(blank=True, choices=[('decimal', 'Decimal'), ('fractional', 'Fractional')], max_length=20, null=True)),
                ('bet_type', models.CharField(blank=True, choices=[('single', 'Single'), ('double', 'Double'), ('treble', 'Treble'), ('fourfold', 'Fourfold'), ('fivefold', 'Fivefold'), ('sixfold', 'Sixfold'), ('sevenfold', 'Sevenfold'), ('eightfold', 'Eightfold'), ('accumulator', 'Accumulator'), ('trixie', 'Trixie'), ('yankee', 'Yankee'), ('canadian', 'Canadian / Super Yankee'), ('patent', 'Patent'), ('lucky15', 'Lucky 15'), ('lucky31', 'Lucky 31'), ('lucky63', 'Lucky 63'), ('heinz', 'Heinz'), ('super_heinz', 'Super Heinz'), ('goliath', 'Goliath'), ('super_heinz_singles', 'Super Heinz with Singles'), ('super_goliath', 'Super Goliath')], max_length=50, null=True)),
                ('each_way', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], default='no', max_length=3)),
                ('confidence', models.PositiveSmallIntegerField(blank=True, choices=[(1, '1 Star'), (2, '2 Stars'), (3, '3 Stars'), (4, '4 Stars'), (5, '5 Stars')], help_text='Confidence level (1-5 stars, optional)', null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('win', 'Win'), ('loss', 'Loss'), ('dead_heat', 'Dead Heat'), ('void_non_runner', 'Void/Non Runner')], default='pending', max_length=20)),
                ('resolution_note', models.TextField(blank=True, null=True)),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('premium', 'Premium Users Only'), ('subscribers', 'All Subscribers'), ('tier_specific', 'Specific Tiers')], default='public', max_length=20)),
                ('release_schedule', models.JSONField(default=dict, help_text='JSON mapping tier IDs to release times')),
                ('is_released', models.BooleanField(default=True)),
                ('scheduled_release', models.DateTimeField(blank=True, null=True)),
                ('is_premium_tip', models.BooleanField(default=False, help_text='Is this a Premium Tip (only for Premium users)?')),
                ('premium_tip_posted_at', models.DateTimeField(blank=True, help_text='When this Premium Tip was posted.', null=True)),
                ('premium_tip_views', models.IntegerField(default=0, help_text='Number of times this Premium Tip was viewed.')),
                ('bookmarks', models.ManyToManyField(blank=True, related_name='bookmarked_tips', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=50)),
                ('content', models.TextField()),
                ('read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('related_comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.comment')),
                ('related_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='related_notifications', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
                ('related_tip', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.tip')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='comment',
            name='tip',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='core.tip'),
        ),
        migrations.CreateModel(
            name='TipsterTier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('price', models.DecimalField(decimal_places=2, max_digits=6)),
                ('description', models.TextField()),
                ('features', models.JSONField(default=list)),
                ('max_subscribers', models.IntegerField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_popular', models.BooleanField(default=False)),
                ('tip_release_delay', models.IntegerField(default=0, help_text='Minutes to delay tip release for this tier')),
                ('priority_access', models.BooleanField(default=False, help_text='Whether this tier gets immediate access to tips')),
                ('can_view_analysis', models.BooleanField(default=True)),
                ('can_view_history', models.BooleanField(default=True)),
                ('stripe_price_id', models.CharField(blank=True, max_length=100, null=True)),
                ('tipster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscription_tiers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['price'],
                'unique_together': {('tipster', 'name')},
            },
        ),
        migrations.AddField(
            model_name='tip',
            name='allowed_tiers',
            field=models.ManyToManyField(blank=True, related_name='exclusive_tips', to='core.tipstertier'),
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('banner', models.ImageField(blank=True, null=True, upload_to='banners/')),
                ('description', models.TextField(blank=True, max_length=160)),
                ('location', models.CharField(blank=True, max_length=100)),
                ('handle', models.CharField(max_length=15, unique=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('allow_messages', models.CharField(choices=[('no_one', 'No one'), ('followers', 'Followers'), ('everyone', 'Everyone')], default='everyone', max_length=20)),
                ('win_rate', models.FloatField(default=0.0)),
                ('total_tips', models.PositiveIntegerField(default=0)),
                ('wins', models.PositiveIntegerField(default=0)),
                ('kyc_completed', models.BooleanField(default=False)),
                ('payment_completed', models.BooleanField(default=False)),
                ('profile_completed', models.BooleanField(default=False)),
                ('full_name', models.CharField(blank=True, max_length=100)),
                ('stripe_customer_id', models.CharField(blank=True, max_length=50, null=True)),
                ('is_premium', models.BooleanField(default=False)),
                ('premium_until', models.DateTimeField(blank=True, null=True)),
                ('premium_features', models.JSONField(default=dict, help_text='Features enabled for this user')),
                ('is_tipster', models.BooleanField(default=False)),
                ('tipster_verified', models.BooleanField(default=False)),
                ('total_subscribers', models.IntegerField(default=0)),
                ('subscription_revenue', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('tipster_description', models.TextField(blank=True)),
                ('tipster_rules', models.TextField(blank=True)),
                ('minimum_tier_price', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('maximum_tier_price', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('has_badge_winning_streak_3', models.BooleanField(default=False)),
                ('has_badge_winning_streak_5', models.BooleanField(default=False)),
                ('has_badge_high_odds_win', models.BooleanField(default=False)),
                ('has_badge_tips_10', models.BooleanField(default=False)),
                ('has_badge_tips_50', models.BooleanField(default=False)),
                ('has_badge_tips_100', models.BooleanField(default=False)),
                ('has_badge_win_rate_60', models.BooleanField(default=False)),
                ('has_badge_win_rate_75', models.BooleanField(default=False)),
                ('has_badge_football_expert', models.BooleanField(default=False)),
                ('has_badge_horse_expert', models.BooleanField(default=False)),
                ('has_badge_hot_streak', models.BooleanField(default=False)),
                ('has_badge_blazing_inferno', models.BooleanField(default=False)),
                ('has_badge_ice_cold', models.BooleanField(default=False)),
                ('has_badge_tipster_titan', models.BooleanField(default=False)),
                ('has_badge_rookie_rocket', models.BooleanField(default=False)),
                ('has_badge_soccer_sniper', models.BooleanField(default=False)),
                ('has_badge_hoop_hero', models.BooleanField(default=False)),
                ('has_badge_touchdown_tycoon', models.BooleanField(default=False)),
                ('has_badge_wicket_wizard', models.BooleanField(default=False)),
                ('has_badge_hole_in_one', models.BooleanField(default=False)),
                ('has_badge_crystal_ball', models.BooleanField(default=False)),
                ('has_badge_upset_oracle', models.BooleanField(default=False)),
                ('has_badge_late_night', models.BooleanField(default=False)),
                ('has_badge_meme_lord', models.BooleanField(default=False)),
                ('has_badge_hail_mary', models.BooleanField(default=False)),
                ('has_badge_crowd_favorite', models.BooleanField(default=False)),
                ('has_badge_tipster_mentor', models.BooleanField(default=False)),
                ('has_badge_streak_starter', models.BooleanField(default=False)),
                ('has_badge_anniversary', models.BooleanField(default=False)),
                ('has_badge_viral', models.BooleanField(default=False)),
                ('tier', models.CharField(choices=[('free', 'Free'), ('premium', 'Premium')], default='free', help_text='Current subscription tier for the user.', max_length=10)),
                ('tier_expiry', models.DateTimeField(blank=True, help_text='When the current paid tier expires.', null=True)),
                ('trial_used', models.BooleanField(default=False, help_text='Has the user used their free trial?')),
                ('is_top_tipster', models.BooleanField(default=False, help_text='Is this user a Top Tipster?')),
                ('top_tipster_since', models.DateTimeField(blank=True, help_text='When the user became a Top Tipster.', null=True)),
                ('total_earnings', models.DecimalField(decimal_places=2, default=0, help_text='Total earnings from tips and revenue sharing', max_digits=10)),
                ('monthly_earnings', models.DecimalField(decimal_places=2, default=0, help_text='Earnings for current month', max_digits=10)),
                ('revenue_share_percentage', models.DecimalField(decimal_places=2, default=0, help_text='Percentage of premium revenue shared with this tipster', max_digits=5)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('followed', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to=settings.AUTH_USER_MODEL)),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('follower', 'followed')},
            },
        ),
        migrations.CreateModel(
            name='Share',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shares', to=settings.AUTH_USER_MODEL)),
                ('tip', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='shares', to='core.tip')),
            ],
            options={
                'unique_together': {('user', 'tip')},
            },
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='core.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to=settings.AUTH_USER_MODEL)),
                ('tip', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='core.tip')),
            ],
            options={
                'unique_together': {('user', 'tip', 'comment')},
            },
        ),
        migrations.CreateModel(
            name='TipsterSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('active', 'Active'), ('cancelled', 'Cancelled'), ('expired', 'Expired'), ('past_due', 'Past Due'), ('incomplete', 'Incomplete'), ('incomplete_expired', 'Incomplete Expired')], default='incomplete', max_length=20)),
                ('start_date', models.DateTimeField(auto_now_add=True)),
                ('end_date', models.DateTimeField()),
                ('auto_renew', models.BooleanField(default=True)),
                ('stripe_subscription_id', models.CharField(blank=True, max_length=100, null=True)),
                ('stripe_customer_id', models.CharField(blank=True, max_length=100, null=True)),
                ('last_payment_date', models.DateTimeField(blank=True, null=True)),
                ('next_payment_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('subscriber', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tipster_subscriptions', to=settings.AUTH_USER_MODEL)),
                ('tier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='core.tipstertier')),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('subscriber', 'tier')},
            },
        ),
    ]
